{"version":3,"sources":["api/jobs/index.tsx","styles/index.tsx","styles/colors/index.tsx","components/navbar/styles.tsx","components/navbar/Navbar.tsx","components/navbar/index.tsx","components/jobs/styles.tsx","components/jobs/Jobs.tsx","components/jobs/index.tsx","components/job/Job.tsx","components/job/styles.tsx","components/job/index.tsx","sections/main/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["buildUrl","skipCount","buildJobURL","id","buildSalary","start","end","jobs","scrapVanHack","a","axios","get","headers","accept","pragma","items","data","result","push","map","job","link","salary","salaryRangeStart","salaryRangeEnd","length","sort","currentJob","nextJob","country","primary","makeStyles","appBar","backgroundColor","styles","features","position","right","classes","AppBar","color","className","Toolbar","IconButton","edge","aria-label","Typography","variant","Button","Navbar","spaceTop","marginTop","children","fetchingData","CircularProgress","size","style","Grid","container","spacing","direction","justify","alignItems","Jobs","onClick","item","xs","sm","spaceBottom","marginBottom","spacedBetween","margin","city","currency","positionName","mustHaveSkills","niceToHaveSkills","jump","gutterBottom","Job","window","open","Card","CardActionArea","CardContent","Divider","key","name","Chip","avatar","Avatar","toUpperCase","label","useState","setJobs","useEffect","jobsAPI","then","Container","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1d361fe.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { IJob } from \"../../interfaces/IJob\";\n\nconst maxResults = 10;\nconst buildUrl = (skipCount: number) =>\n  `https://api-vanhack-prod.azurewebsites.net/v1/job/search/full/?MaxResultCount=${maxResults}&SkipCount=${skipCount}`;\nconst buildJobURL = (id: number) => `https://vanhack.com/platform/#/jobs/${id}`;\nconst buildSalary = (start?: number, end?: number) => end || start || null;\nconst jobs: IJob[] = [];\n\nconst scrapVanHack = async (skipCount: number = 0) => {\n  const {\n    data: {\n      result: { items },\n    },\n  } = await axios.get(buildUrl(skipCount), {\n    headers: {\n      \"Access-Control-Allow-Origin\": \"*\",\n      accept:\n        \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\",\n      \"accept-language\": \"es-419,es;q=0.9\",\n      \"cache-control\": \"no-cache\",\n      pragma: \"no-cache\",\n      \"sec-fetch-dest\": \"document\",\n      \"sec-fetch-mode\": \"navigate\",\n      \"sec-fetch-site\": \"none\",\n      \"sec-fetch-user\": \"?1\",\n      \"upgrade-insecure-requests\": \"1\",\n    },\n  });\n\n  jobs.push(\n    ...items.map((job: IJob) => ({\n      ...job,\n      link: buildJobURL(job.id),\n      salary: buildSalary(job.salaryRangeStart, job.salaryRangeEnd),\n    }))\n  );\n\n  if (items.length === maxResults) {\n    await scrapVanHack(skipCount + maxResults);\n  }\n\n  return jobs.sort((currentJob: IJob, nextJob: IJob) =>\n    currentJob.country < nextJob.country ? -1 : 1\n  );\n};\n\nexport default scrapVanHack;\n","import colors from \"./colors\";\n\nexport default {\n  colors,\n};\n","export default {\n  primary: \"#0675ce\",\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\nimport styles from \"../../styles/index\";\n\nexport default makeStyles({\n  appBar: {\n    backgroundColor: styles.colors.primary,\n  },\n  features: {\n    position: \"absolute\",\n    right: \"50px\",\n  },\n});\n","import React from \"react\";\nimport {\n  AppBar,\n  Button,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport styles from \"./styles\";\n\nexport default () => {\n  const classes = styles();\n  return (\n    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n          <MenuIcon />\n        </IconButton>\n        <Typography variant=\"h6\">Van Hack</Typography>\n        <Button color=\"inherit\">Inicio</Button>\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\n\nexport default () => {\n  return <Navbar />;\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport default makeStyles({\n  spaceTop: {\n    marginTop: \"50px\",\n  },\n});\n","import React, { ReactNode } from \"react\";\nimport { CircularProgress, Grid } from \"@material-ui/core\";\nimport styles from \"./styles\";\n\ninterface Props {\n  children: ReactNode;\n  fetchingData: boolean;\n}\n\nexport default ({ children, fetchingData }: Props) => {\n  const classes = styles();\n\n  return fetchingData ? (\n    <CircularProgress size={150} style={{ marginTop: \"25%\" }} />\n  ) : (\n    <Grid\n      container\n      spacing={1}\n      direction=\"row\"\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      className={classes.spaceTop}\n    >\n      {children}\n    </Grid>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport Jobs from \"./Jobs\";\n\ninterface Props {\n  children: ReactNode;\n  fetchingData: boolean;\n}\n\nexport default ({ children, fetchingData }: Props) => {\n  return <Jobs fetchingData={fetchingData}>{children}</Jobs>;\n};\n","import React, { ReactNode } from \"react\";\nimport { Grid } from \"@material-ui/core\";\n\ninterface Props {\n  children: ReactNode;\n  onClick: () => void;\n}\n\nexport default ({ children, onClick }: Props) => {\n  return (\n    <Grid item xs={12} sm={3} onClick={onClick}>\n      {children}\n    </Grid>\n  );\n};\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport default makeStyles({\n  spaceTop: {\n    marginTop: \"25px\",\n  },\n  spaceBottom: {\n    marginBottom: \"16px\",\n  },\n  spacedBetween: {\n    margin: \"2px\",\n  },\n});\n","import React from \"react\";\nimport { IJob } from \"../../interfaces/IJob\";\nimport Job from \"./Job\";\nimport {\n  Avatar,\n  Card,\n  CardActionArea,\n  CardContent,\n  Chip,\n  Divider,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport styles from \"./styles\";\nimport { ISkill } from \"../../interfaces/ISkill\";\n\ninterface Props extends IJob {\n  jump: boolean;\n}\n\nexport default ({\n  country,\n  city,\n  currency,\n  salary,\n  link,\n  positionName,\n  mustHaveSkills,\n  niceToHaveSkills,\n  jump,\n}: Props) => {\n  const classes = styles();\n\n  return (\n    <>\n      {jump && (\n        <Grid\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"center\"\n          xs={12}\n          className={classes.spaceTop}\n        >\n          <Grid item xs={3}>\n            <Typography variant=\"h4\" gutterBottom>\n              {country}\n            </Typography>\n          </Grid>\n        </Grid>\n      )}\n      <Job onClick={() => window.open(link)}>\n        <Card>\n          <CardActionArea>\n            <CardContent>\n              <Grid\n                container\n                spacing={1}\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n              >\n                <Grid item xs={12} sm={6}>\n                  <div>{country}</div>\n                  <div>\n                    <b>{city}</b>\n                  </div>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <div>\n                    {salary ? (\n                      <b>\n                        {salary} {currency}\n                      </b>\n                    ) : (\n                      \"Not informed\"\n                    )}\n                  </div>\n                </Grid>\n                <Grid item xs={12}>\n                  <Divider variant=\"middle\" className={classes.spaceBottom} />\n                  {positionName}\n                </Grid>\n                <Grid item xs={12}>\n                  {mustHaveSkills?.map(({ name }: ISkill, key: number) => (\n                    <Chip\n                      className={classes.spacedBetween}\n                      key={key}\n                      size=\"small\"\n                      avatar={<Avatar>{name[0].toUpperCase()}</Avatar>}\n                      label={name}\n                      color=\"secondary\"\n                    />\n                  ))}\n                  {niceToHaveSkills?.map(({ name }: ISkill, key: number) => (\n                    <Chip\n                      className={classes.spacedBetween}\n                      key={key}\n                      size=\"small\"\n                      avatar={<Avatar>{name[0].toUpperCase()}</Avatar>}\n                      label={name}\n                      color=\"secondary\"\n                      variant=\"outlined\"\n                    />\n                  ))}\n                </Grid>\n              </Grid>\n            </CardContent>\n          </CardActionArea>\n        </Card>\n      </Job>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport jobsAPI from \"../../api/jobs\";\nimport { IJob } from \"../../interfaces/IJob\";\nimport Navbar from \"../../components/navbar\";\nimport Jobs from \"../../components/jobs\";\nimport Job from \"../../components/job\";\nimport { Container } from \"@material-ui/core\";\n\nexport default () => {\n  const [jobs, setJobs] = useState<IJob[]>([]);\n\n  useEffect(() => {\n    jobsAPI().then(setJobs);\n  }, []);\n\n  return (\n    <>\n      <Navbar />\n      <Container>\n        <Jobs fetchingData={jobs.length === 0}>\n          {jobs.map((job: IJob, key: number) => (\n            <Job\n              key={key}\n              jump={\n                key === 0 || (key > 0 && job.country !== jobs[key - 1].country)\n              }\n              {...job}\n            />\n          ))}\n        </Jobs>\n      </Container>\n    </>\n  );\n};\n","import React from \"react\";\nimport Main from \"./sections/main\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}